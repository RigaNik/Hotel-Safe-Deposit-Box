{"version":3,"sources":["redux/deposit-box/action-types.js","redux/deposit-box/reducer.js","app/reducers.js","views/components/safe-box-screen/SafeBoxScreen.js","app/env.js","app/consts/conf.js","redux/deposit-box/actions.js","app/consts/keypads.js","views/components/safe-box-key/SafeBoxKey.js","views/components/safe-box-wrapper/SafeBoxWrapper.js","app/App.js","app/store.js","utils/serviceWorker.js","index.js"],"names":["ADD_KEY","GO_IDLE_STATE","GO_ERROR_STATE","GO_TO_SERVICE_MODE","VALIDATION_START","VALIDATION_SUCCESS","VALIDATION_ERROR","UNLOCK_DEPOSIT_BOX","UNLOCK_DEPOSIT_BOX_SUCCESS","LOCK_DEPOSIT_BOX","LOCK_DEPOSIT_BOX_SUCCESS","DepositBoxState","Record","savedPassword","password","lock","status","idle","serviceMode","sn","loading","depositBoxReducer","state","arguments","length","undefined","_ref","payload","type","TYPES","merge","rootReducer","combineReducers","depositBox","SafeBoxScreen","props","react_default","a","createElement","className","env","baseUrl","validationRoute","globals","inputDelayTimeout","mechanicalValidationTimeout","serviceValidationTimeout","screenLightTimeout","validationStartAction","validatedSuccessAction","validatedErrorAction","goErrorStateAction","lockDepositBoxAction","lockDepositBoxSuccessAction","unlockDepositBoxAction","unlockDepositBoxSuccessAction","keypads","SafeBoxKey","padKey","keyAction","disabled","aria-disabled","onClick","SafeBoxWrapper","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyBoardInputs","event","key","toUpperCase","toString","indexOf","addKey","_this$props","addKeyAction","isNaN","clearTimeout","inputSubmit","setTimeout","checkServiceMode","keySubmit","validateMasterCode","sceenLightOff","_this$props2","locking","unlocking","_this$props3","goToServiceModeAction","_this$props4","toConsumableArray","Set","split","goIdleAction","document","addEventListener","_this2","checkIdleState","components_safe_box_screen_SafeBoxScreen","map","item","index","components_safe_box_key_SafeBoxKey","Component","mapDispatchToProps","serialNumber","dispatch","axios","concat","then","response","catch","data","connect","store","initialState","middlewares","thunk","middleware","applyMiddleware","apply","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","initStore","App","react_redux_es","components_safe_box_wrapper_SafeBoxWrapper","Boolean","location","hostname","match","ReactDOM","render","app_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gUACaA,EAAU,UAGVC,EAAgB,gBAChBC,EAAiB,iBACjBC,EAAqB,qBAGrBC,EAAmB,mBACnBC,EAAqB,qBACrBC,EAAmB,mBAGnBC,EAAqB,qBACrBC,EAA6B,6BAC7BC,EAAmB,mBACnBC,EAA2B,2BCd3BC,EAAkB,IAAIC,IAAO,CACxCC,cAAe,GACfC,SAAU,GACVC,MAAM,EACNC,OAAQ,QACRC,MAAM,EACNC,aAAa,EACbC,GAAI,aACJC,SAAS,IAGJ,SAASC,IAAoE,IAAlDC,EAAkDC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA1C,IAAIZ,EAAsCe,EAAAH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAAjBE,EAAiBD,EAAjBC,QACjE,OADkFD,EAARE,MAExE,KAAKC,EACH,OAAOP,EAAMQ,MAAM,CACjBhB,SAAWQ,EAAMJ,aAAyC,IAA1BI,EAAMR,SAASU,OAAgCF,EAAMR,SAAWa,EAAlCL,EAAMR,SACpEG,MAAM,IAIV,KAAKY,EACH,OAAOP,EAAMQ,MAAM,CACjBb,MAAM,IAGV,KAAKY,EACH,OAAOP,EAAMQ,MAAM,CACjBZ,aAAa,EACbF,OAAQ,UACRF,SAAU,KAGd,KAAKe,EACH,OAAOP,EAAMQ,MAAM,CACjBd,OAAQ,QACRF,SAAU,GACVM,SAAS,IAIb,KAAKS,EACH,OAAOP,EAAMQ,MAAM,CACjBd,OAAQ,aACRI,SAAS,EACTN,SAAU,KAGd,KAAKe,EACH,OAAOP,EAAMQ,MAAM,CACjBd,OAAQ,QACRI,SAAS,EACTL,MAAM,EACNG,aAAa,EACbJ,SAAU,GACVD,cAAe,KAGnB,KAAKgB,EACH,OAAOP,EAAMQ,MAAM,CACjBd,OAAQ,QACRI,SAAS,EACTN,SAAU,KAId,KAAKe,EACH,OAAOP,EAAMQ,MAAM,CACjBf,MAAM,EACNC,OAAQ,YACRF,SAAU,GACVM,SAAS,IAGb,KAAKS,EACH,OAAOP,EAAMQ,MAAM,CACjBf,MAAM,EACNC,OAAQ,QACRF,SAAU,GACVM,SAAS,IAIb,KAAKS,EACH,OAAOP,EAAMQ,MAAM,CACjBf,MAAM,EACNC,OAAQ,UACRH,cAAec,EACfb,SAAU,GACVM,SAAS,IAGb,KAAKS,EACH,OAAOP,EAAMQ,MAAM,CACjBf,MAAM,EACNC,OAAQ,QACRI,SAAS,IAGb,QACE,OAAOE,GCnGb,IAKeS,EALK,kBAClBC,YAAgB,CACdC,WAAYZ,oBCQDa,eAVO,SAAAC,GAAS,IACrBpB,EAAiCoB,EAAjCpB,KAAMC,EAA2BmB,EAA3BnB,OAAQF,EAAmBqB,EAAnBrB,SAAUG,EAASkB,EAATlB,KAChC,OACEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAYtB,EAAuB,gCAAhB,eACtBmB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAsBxB,EAAoB,SAAb,YAC1CqB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,sBAAuBzB,EAASU,OAAkBV,EAATE,cCH7CwB,EALH,CACVC,QAAS,wBACTC,gBAAiB,qFCKJC,EAPC,CACdC,kBAAmB,IACnBC,4BAA6B,IAC7BC,yBAA0B,IAC1BC,mBAAoB,KC8DTC,EAAwB,WACnC,MAAO,CACLpB,KAAMC,IAIGoB,EAAyB,WACpC,MAAO,CACLrB,KAAMC,IAIGqB,EAAuB,WAClC,MAAO,CACLtB,KAAMC,IAIGsB,EAAqB,WAChC,MAAO,CACLvB,KAAMC,IAIGuB,EAAuB,SAAAtC,GAClC,MAAO,CACLc,KAAMC,EACNF,QAASb,IAIAuC,EAA8B,WACzC,MAAO,CACLzB,KAAMC,IAIGyB,EAAyB,WACpC,MAAO,CACL1B,KAAMC,IAIG0B,EAAgC,WAC3C,MAAO,CACL3B,KAAMC,IC7GK2B,EAFC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,KCarCC,SAVI,SAAAtB,GAAS,IAClBuB,EAAgCvB,EAAhCuB,OAAQC,EAAwBxB,EAAxBwB,UAAWC,EAAazB,EAAbyB,SAE3B,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAWqB,EAAW,oCAAsC,cAAeC,gBAAeD,EAAUE,QAAS,kBAAMH,EAAUD,KAChItB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAA0BmB,MCCvCK,cACJ,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAKFI,qBAAuB,SAAAC,GACrB,IAAMC,EAAMD,EAAMC,IAAIC,eACmB,IAArClB,EAAQmB,WAAWC,QAAQH,IAC7BT,EAAKa,OAAOJ,IATFT,EAada,OAAS,SAAAJ,GAAO,IAAAK,EACuBd,EAAK7B,MAAlC4C,EADMD,EACNC,aAAc9C,EADR6C,EACQ7C,WACdf,EAAyBe,EAAzBf,YAAyBe,EAAZb,UAGhBF,GAAgB8D,MAAMP,GAEhBvD,GACT6D,GAAgBA,EAAaN,GAF7BM,GAAgBA,EAAaN,GAK/BQ,aAAajB,EAAKkB,aAEbhE,GAAuB,MAARuD,EAIlBT,EAAKkB,YAAcC,WAAW,WAC5BnB,EAAKoB,mBACLpB,EAAKqB,YACLrB,EAAKsB,sBACJ3C,EAAQC,oBAPXoB,EAAKqB,YACLrB,EAAKoB,sBA1BPpB,EAAKuB,cAAgB,KACrBvB,EAAKkB,YAAc,KAHPlB,2EAsCF,IAAAwB,EACiCrB,KAAKhC,MAAxCsD,EADED,EACFC,QAASC,EADPF,EACOE,UAAWzD,EADlBuD,EACkBvD,WACpBnB,EAA+CmB,EAA/CnB,SAAUD,EAAqCoB,EAArCpB,cAAeE,EAAsBkB,EAAtBlB,KAAsBkB,EAAhBf,aACC,IAApBJ,EAASU,SACtBT,EAGH2E,GAAaA,EAAU7E,EAAeC,GAFtC2E,GAAWA,EAAQ3E,+CAON,IAAA6E,EAC6BxB,KAAKhC,MAA3CF,EADS0D,EACT1D,WAAY2D,EADHD,EACGC,sBACZ9E,EAAgCmB,EAAhCnB,SAAUI,EAAsBe,EAAtBf,YAAsBe,EAATlB,OAElBG,GAAmC,IAApBJ,EAASU,QAA6B,WAAbV,GACnD8E,GAAyBA,iDAIR,IAAAC,EACwB1B,KAAKhC,MAAxCF,EADW4D,EACX5D,WAAYqD,EADDO,EACCP,mBACZxE,EAAoCmB,EAApCnB,SAAUI,EAA0Be,EAA1Bf,YAAaH,EAAakB,EAAblB,KAAMI,EAAOc,EAAPd,GAEjCJ,GAAQG,GAAeJ,EAASU,QAAU,KAEnB,KADVyC,OAAA6B,EAAA,EAAA7B,CAAO,IAAI8B,IAAIjF,EAASkF,MAAM,MAC/BxE,QACZ8D,GAAsBA,EAAmBxE,EAAUK,6CAKxC,IACP8E,EAAiB9B,KAAKhC,MAAtB8D,aAERhB,aAAad,KAAKoB,eAClBpB,KAAKoB,cAAgBJ,WAAW,WAC9Bc,GAAgBA,KACftD,EAAQI,gEAIXmD,SAASC,iBAAiB,UAAWhC,KAAKI,uDAGnC,IAAA6B,EAAAjC,KACClC,EAAekC,KAAKhC,MAApBF,WACAlB,EAA8CkB,EAA9ClB,KAAMC,EAAwCiB,EAAxCjB,OAAQF,EAAgCmB,EAAhCnB,SAAUG,EAAsBgB,EAAtBhB,KAAMG,EAAgBa,EAAhBb,QAASD,EAAOc,EAAPd,GAM/C,OAJKF,GACHkD,KAAKkC,iBAILjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACgE,EAAD,CAAevF,KAAMA,EAAMC,OAAQA,EAAQF,SAAUA,EAAUG,KAAMA,IACrEmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACZiB,EAAQ+C,IAAI,SAACC,EAAMC,GAAP,OACXrE,EAAAC,EAAAC,cAACoE,EAAD,CAAYjC,IAAKgC,EAAO/C,OAAQ8C,EAAM5C,SAAUxC,EAASuC,UAAWyC,EAAKvB,YAG7EzC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,+BAAb,QAAiDpB,WArG5BwF,aA+GvBC,EAAqB,CACzBhB,sBHnEmC,WACnC,MAAO,CACLhE,KAAMC,IGkERyD,mBHrHgC,SAACxE,EAAU+F,GAC3C,OAAO,SAAAC,GACLA,EAAS9D,KACT+D,MAAA,GAAAC,OACUxE,EAAIE,gBADd,UAAAsE,OACsClG,IACnCmG,KAAK,SAAAC,GACJ/B,WAAW,WACL+B,EAAS/F,KAAO0F,EAClBC,EAAS7D,KAET6D,EAAS5D,MAEVP,EAAQG,4BAEZqE,MAAM,WACLL,EAAS5D,SGuGf6B,aH5E0B,SAAAqC,GAC1B,MAAO,CACLxF,KAAMC,EACNF,QAASyF,IG0EX3B,QHnGqB,SAAA3E,GACrB,OAAO,SAAAgG,GACLA,EAAS1D,EAAqBtC,IAC9BqE,WAAW,WACT2B,EAASzD,MACRV,EAAQE,+BG+Fb6C,UH3FuB,SAAC7E,EAAeC,GACvC,OAAO,SAAAgG,GACLA,EAASxD,KACT6B,WAAW,WAEP2B,EADEjG,IAAkBC,EACXyC,IAEAJ,MAEVR,EAAQE,+BGmFboD,aHlE0B,WAC1B,MAAO,CACLrE,KAAMC,KGmEKwF,cAbS,SAAA/F,GAAK,MAAK,CAChCW,WAAYX,EAAMW,aAclB2E,EAFaS,CAGbtD,GC/HIuD,ECAS,WAAuB,IAAtBC,EAAsBhG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACvBiG,EAAc,CAACC,KACjBC,EAAaC,IAAeC,WAAf,EAAmBJ,GAE9BK,EACc,kBAAXC,QAAuBA,OAAOC,qCAAuCD,OAAOC,qCAAqC,IAAMC,IAEhI,OAAOC,YAAYlG,IAAewF,EAAcM,EAAiBH,IDPrDQ,GAYCC,mLARX,OACE/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,CAAUd,MAAOA,GACflF,EAAAC,EAAAC,cAAC+F,EAAD,cAJU1B,aEKE2B,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OAAOvG,EAAAC,EAAAC,cAACsG,EAAD,MAAS1C,SAAS2C,eAAe,SD8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.9ae9962f.chunk.js","sourcesContent":["// KeyPad Event\nexport const ADD_KEY = 'ADD_KEY';\n\n// Change Mode\nexport const GO_IDLE_STATE = 'GO_IDLE_STATE';\nexport const GO_ERROR_STATE = 'GO_ERROR_STATE';\nexport const GO_TO_SERVICE_MODE = 'GO_TO_SERVICE_MODE';\n\n// Validate Code && Serial Number\nexport const VALIDATION_START = 'VALIDATION_START';\nexport const VALIDATION_SUCCESS = 'VALIDATION_SUCCESS';\nexport const VALIDATION_ERROR = 'VALIDATION_ERROR';\n\n// Unlock && Lock Deposit Box\nexport const UNLOCK_DEPOSIT_BOX = 'UNLOCK_DEPOSIT_BOX';\nexport const UNLOCK_DEPOSIT_BOX_SUCCESS = 'UNLOCK_DEPOSIT_BOX_SUCCESS';\nexport const LOCK_DEPOSIT_BOX = 'LOCK_DEPOSIT_BOX';\nexport const LOCK_DEPOSIT_BOX_SUCCESS = 'LOCK_DEPOSIT_BOX_SUCCESS';\n","import { Record } from 'immutable';\nimport * as TYPES from './action-types';\n\nexport const DepositBoxState = new Record({\n  savedPassword: '',\n  password: '',\n  lock: false,\n  status: 'Ready',\n  idle: true,\n  serviceMode: false,\n  sn: '9859111688',\n  loading: false,\n});\n\nexport function depositBoxReducer(state = new DepositBoxState(), { payload, type }) {\n  switch (type) {\n    case TYPES.ADD_KEY:\n      return state.merge({\n        password: !state.serviceMode && state.password.length === 6 ? state.password : state.password + payload,\n        idle: false,\n      });\n\n    // States\n    case TYPES.GO_IDLE_STATE:\n      return state.merge({\n        idle: true,\n      });\n\n    case TYPES.GO_TO_SERVICE_MODE:\n      return state.merge({\n        serviceMode: true,\n        status: 'Service',\n        password: '',\n      });\n\n    case TYPES.GO_ERROR_STATE:\n      return state.merge({\n        status: 'Error',\n        password: '',\n        loading: false,\n      });\n\n    //Validation\n    case TYPES.VALIDATION_START:\n      return state.merge({\n        status: 'Validating',\n        loading: true,\n        password: '',\n      });\n\n    case TYPES.VALIDATION_SUCCESS:\n      return state.merge({\n        status: 'Ready',\n        loading: false,\n        lock: false,\n        serviceMode: false,\n        password: '',\n        savedPassword: '',\n      });\n\n    case TYPES.VALIDATION_ERROR:\n      return state.merge({\n        status: 'Error',\n        loading: false,\n        password: '',\n      });\n\n    // Unlock Deposit\n    case TYPES.UNLOCK_DEPOSIT_BOX:\n      return state.merge({\n        lock: true,\n        status: 'Unlocking',\n        password: '',\n        loading: true,\n      });\n\n    case TYPES.UNLOCK_DEPOSIT_BOX_SUCCESS:\n      return state.merge({\n        lock: false,\n        status: 'Ready',\n        password: '',\n        loading: false,\n      });\n\n    // Lock Deposit\n    case TYPES.LOCK_DEPOSIT_BOX:\n      return state.merge({\n        lock: false,\n        status: 'Locking',\n        savedPassword: payload,\n        password: '',\n        loading: true,\n      });\n\n    case TYPES.LOCK_DEPOSIT_BOX_SUCCESS:\n      return state.merge({\n        lock: true,\n        status: 'Ready',\n        loading: false,\n      });\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { depositBoxReducer } from '../redux/deposit-box/reducer';\n\nconst rootReducer = () =>\n  combineReducers({\n    depositBox: depositBoxReducer,\n  });\n\nexport default rootReducer;\n","import React from 'react';\nimport './SafeBoxScreen.scss';\n\nconst SafeBoxScreen = props => {\n  const { lock, status, password, idle } = props;\n  return (\n    <div className={!idle ? 'sdb--screen' : 'sdb--screen sdb--screen--idle'}>\n      <p className=\"sdb--screen--lock\">{!lock ? 'Unlocked' : 'Locked'}</p>\n      <p className=\"sdb--screen--state\">{!password.length ? status : password}</p>\n    </div>\n  );\n};\n\nexport default SafeBoxScreen;\n","const env = {\n  baseUrl: 'http://localhost:3000',\n  validationRoute: 'https://9w4qucosgf.execute-api.eu-central-1.amazonaws.com/default/CR-JS_team_M02a',\n};\n\nexport default env;\n","const globals = {\n  inputDelayTimeout: 1000,\n  mechanicalValidationTimeout: 3000,\n  serviceValidationTimeout: 3000, // simulate delay in API validation\n  screenLightTimeout: 5000,\n};\n\nexport default globals;\n","import * as TYPES from './action-types';\nimport * as axios from 'axios';\nimport env from '../../app/env';\nimport globals from '../../app/consts/conf';\n\nexport const validateMasterCode = (password, serialNumber) => {\n  return dispatch => {\n    dispatch(validationStartAction());\n    axios\n      .get(`${env.validationRoute}?code=${password}`)\n      .then(response => {\n        setTimeout(() => {\n          if (response.sn === serialNumber) {\n            dispatch(validatedSuccessAction());\n          } else {\n            dispatch(validatedErrorAction());\n          }\n        }, globals.serviceValidationTimeout);\n      })\n      .catch(() => {\n        dispatch(validatedErrorAction());\n      });\n  };\n};\n\nexport const locking = password => {\n  return dispatch => {\n    dispatch(lockDepositBoxAction(password));\n    setTimeout(() => {\n      dispatch(lockDepositBoxSuccessAction());\n    }, globals.mechanicalValidationTimeout);\n  };\n};\n\nexport const unlocking = (savedPassword, password) => {\n  return dispatch => {\n    dispatch(unlockDepositBoxAction());\n    setTimeout(() => {\n      if (savedPassword === password) {\n        dispatch(unlockDepositBoxSuccessAction());\n      } else {\n        dispatch(goErrorStateAction());\n      }\n    }, globals.mechanicalValidationTimeout);\n  };\n};\n\nexport const addKeyAction = data => {\n  return {\n    type: TYPES.ADD_KEY,\n    payload: data,\n  };\n};\n\nexport const goToServiceModeAction = () => {\n  return {\n    type: TYPES.GO_TO_SERVICE_MODE,\n  };\n};\n\nexport const goIdleAction = () => {\n  return {\n    type: TYPES.GO_IDLE_STATE,\n  };\n};\n\nexport const validationStartAction = () => {\n  return {\n    type: TYPES.VALIDATION_START,\n  };\n};\n\nexport const validatedSuccessAction = () => {\n  return {\n    type: TYPES.VALIDATION_SUCCESS,\n  };\n};\n\nexport const validatedErrorAction = () => {\n  return {\n    type: TYPES.VALIDATION_ERROR,\n  };\n};\n\nexport const goErrorStateAction = () => {\n  return {\n    type: TYPES.GO_ERROR_STATE,\n  };\n};\n\nexport const lockDepositBoxAction = password => {\n  return {\n    type: TYPES.LOCK_DEPOSIT_BOX,\n    payload: password,\n  };\n};\n\nexport const lockDepositBoxSuccessAction = () => {\n  return {\n    type: TYPES.LOCK_DEPOSIT_BOX_SUCCESS,\n  };\n};\n\nexport const unlockDepositBoxAction = () => {\n  return {\n    type: TYPES.UNLOCK_DEPOSIT_BOX,\n  };\n};\n\nexport const unlockDepositBoxSuccessAction = () => {\n  return {\n    type: TYPES.UNLOCK_DEPOSIT_BOX_SUCCESS,\n  };\n};\n","const keypads = [7, 8, 9, 4, 5, 6, 1, 2, 3, '*', 0, 'L'];\n\nexport default keypads;\n","import React from 'react';\nimport './SafeBoxKey.scss';\n\nconst SafeBoxKey = props => {\n  const { padKey, keyAction, disabled } = props;\n\n  return (\n    <div className={disabled ? 'sdb--button sdb--button--disabled' : 'sdb--button'} aria-disabled={disabled} onClick={() => keyAction(padKey)}>\n      <p className=\"sdb--button--paragraph\">{padKey}</p>\n    </div>\n  );\n};\n\nexport default SafeBoxKey;\n","import React, { Component } from 'react';\nimport './SafeBoxWrapper.scss';\nimport { connect } from 'react-redux';\nimport SafeBoxScreen from '../safe-box-screen/SafeBoxScreen';\nimport { addKeyAction, goIdleAction, goToServiceModeAction, locking, unlocking, validateMasterCode } from '../../../redux/deposit-box/actions';\nimport keypads from '../../../app/consts/keypads';\nimport SafeBoxKey from '../safe-box-key/SafeBoxKey';\nimport globals from '../../../app/consts/conf';\n\nclass SafeBoxWrapper extends Component {\n  constructor() {\n    super();\n    this.sceenLightOff = null;\n    this.inputSubmit = null;\n  }\n\n  handleKeyBoardInputs = event => {\n    const key = event.key.toUpperCase();\n    if (keypads.toString().indexOf(key) !== -1) {\n      this.addKey(key);\n    }\n  };\n\n  addKey = key => {\n    const { addKeyAction, depositBox } = this.props;\n    const { serviceMode, loading } = depositBox;\n    if (loading) return;\n\n    if (!serviceMode && !isNaN(key)) {\n      addKeyAction && addKeyAction(key);\n    } else if (serviceMode) {\n      addKeyAction && addKeyAction(key);\n    }\n\n    clearTimeout(this.inputSubmit);\n\n    if (!serviceMode && key === 'L') {\n      this.keySubmit();\n      this.checkServiceMode();\n    } else {\n      this.inputSubmit = setTimeout(() => {\n        this.checkServiceMode();\n        this.keySubmit();\n        this.validateMasterCode();\n      }, globals.inputDelayTimeout);\n    }\n  };\n\n  keySubmit() {\n    const { locking, unlocking, depositBox } = this.props;\n    const { password, savedPassword, lock, serviceMode } = depositBox;\n    if (!serviceMode && password.length === 6) {\n      if (!lock) {\n        locking && locking(password);\n      } else {\n        unlocking && unlocking(savedPassword, password);\n      }\n    }\n  }\n\n  checkServiceMode() {\n    const { depositBox, goToServiceModeAction } = this.props;\n    const { password, serviceMode, lock } = depositBox;\n\n    if (lock && !serviceMode && password.length === 6 && password === '000000') {\n      goToServiceModeAction && goToServiceModeAction();\n    }\n  }\n\n  validateMasterCode() {\n    const { depositBox, validateMasterCode } = this.props;\n    const { password, serviceMode, lock, sn } = depositBox;\n\n    if (lock && serviceMode && password.length >= 12) {\n      const areUnique = [...new Set(password.split(''))]; // just check if whole arr is unique\n      if (areUnique.length === 12) {\n        validateMasterCode && validateMasterCode(password, sn);\n      }\n    }\n  }\n\n  checkIdleState() {\n    const { goIdleAction } = this.props;\n\n    clearTimeout(this.sceenLightOff);\n    this.sceenLightOff = setTimeout(() => {\n      goIdleAction && goIdleAction();\n    }, globals.screenLightTimeout);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyBoardInputs);\n  }\n\n  render() {\n    const { depositBox } = this.props;\n    const { lock, status, password, idle, loading, sn } = depositBox;\n\n    if (!idle) {\n      this.checkIdleState();\n    }\n\n    return (\n      <div className=\"sdb--wrapper\">\n        <SafeBoxScreen lock={lock} status={status} password={password} idle={idle} />\n        <div className=\"sdb--wrapper--keyboard\">\n          {keypads.map((item, index) => (\n            <SafeBoxKey key={index} padKey={item} disabled={loading} keyAction={this.addKey} />\n          ))}\n        </div>\n        <p className=\"sdb--wrapper--serial-number\">S/N: {sn}</p>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  depositBox: state.depositBox,\n});\n\nconst mapDispatchToProps = {\n  goToServiceModeAction,\n  validateMasterCode,\n  addKeyAction,\n  locking,\n  unlocking,\n  goIdleAction,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SafeBoxWrapper);\n","import React, { Component } from 'react';\nimport initStore from './store';\nimport { Provider } from 'react-redux';\nimport SafeBoxWrapper from '../views/components/safe-box-wrapper/SafeBoxWrapper';\n\nconst store = initStore();\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <SafeBoxWrapper />\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import { applyMiddleware, createStore, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n// todo, comeback to refactor reduxdevtools for dev only based on env const\nexport default (initialState = {}) => {\n  const middlewares = [thunk];\n  let middleware = applyMiddleware(...middlewares);\n\n  const composeEnhancers =\n    typeof window === 'object' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}) : compose;\n\n  return createStore(rootReducer(), initialState, composeEnhancers(middleware));\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log('New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.');\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './app/App';\nimport * as serviceWorker from './utils/serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}